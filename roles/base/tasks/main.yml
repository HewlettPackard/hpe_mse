---
- name: Deploying MSE node(s)
  debug: 
    var=theNode

- name: Enable root at the console prompt
  shell: echo "root:hwroot" | chpasswd

- name: Set dns names servers if defined
  lineinfile: 
    path: /etc/resolv.conf
    insertbefore: '^search.*'
    line: "nameserver  {{nameserver}}"
  when: nameserver is defined

- name: Set hostname
  hostname: 
    name: "{{theNodeHostname}}"

- name: Enforce name resolution to *not* use myhostname in /etc/nsswitch.conf for getent
  replace:
    dest=/etc/nsswitch.conf
    regexp='myhostname'
    replace=''
    backup=yes

- name: Create MSE directories
  with_items: ["{{isoRepo}}","{{isoMountPoint}}"]
  loop_control:
    loop_var:
      _dir
  file: 
    path: "{{_dir}}" 
    state: directory
    recurse: yes

- name: Install createrepo for labdrops management
  yum:
    name: createrepo

- name: Get the MSE engine ISO image {{engineIso}} from cache {{cacheIso}}
  copy:
    src: "{{cacheIso}}{{engineIso}}"
    dest: "{{isoRepo}}{{engineIso}}"
  when: cacheIso is defined

- name: Get the MSE engine ISO image {{engineIso}} from remote {{isoUrl}}
  get_url:
    url: "{{isoUrl}}{{engineIso}}"
    dest: "{{isoRepo}}{{engineIso}}"
  notify: refresh MSE instance
  when: cacheIso is not defined

- name: Get additional YUM repositories definitions
  with_items: "{{yumReposDef}}"
  loop_control:
    loop_var:
      _repo
  get_url:
    url: "{{yumReposDefUrl}}{{_repo}}"
    dest: "/etc/yum.repos.d"
  when: yumReposDef is defined

- name: Get the MSE product ISO images from cache {{cacheIso}}
  with_items: "{{mseProduct}}"
  loop_control:
    loop_var:
      _isoImage
  copy:
    src: "{{cacheIso}}{{_isoImage}}"
    dest: "{{isoRepo}}{{_isoImage}}"
  notify: refresh MSE instance
  when: cacheIso is defined

- name: Get the MSE product ISO images from remote {{isoUrl}}
  with_items: "{{mseProduct}}"
  loop_control:
    loop_var:
      _isoImage
  get_url:
    url: "{{isoUrl}}{{_isoImage}}"
    dest: "{{isoRepo}}{{_isoImage}}"
  when: cacheIso is not defined

- name: Remove unused ISO images
  shell: ls {{isoRepo}}*.iso | grep -v -e {{ engineIso }} -e {{' -e '.join((mseProduct )) }} | xargs rm -f

- name: Retrieve lab drops in {{isoRepo}} from cache {{cacheIso }}
  with_items: "{{mseLabDrops}}"
  loop_control:
    loop_var:
      _rpm
  copy:
    src: "{{cacheIso }}{{_rpm}}"
    dest: "{{isoRepo}}{{_rpm}}"
  notify: refresh MSE instance
  when: cacheIso is defined

- name: Retrieve lab drops in {{isoRepo}} from remote {{isoUrl}}
  with_items: "{{mseLabDrops}}"
  loop_control:
    loop_var:
      _rpm
  get_url:
    url: "{{isoUrl}}{{_rpm}}"
    dest: "{{isoRepo}}{{_rpm}}"
  notify: refresh MSE instance
  when: cacheIso is not defined

- block:
  - name: Get MSE engine installer install-tas.sh 
    iso_extract:
      image: "{{isoRepo}}{{engineIso}}"
      dest: "{{isoRepo}}"
      files:
      - utils/install-tas.sh
  rescue:
  - name: get MSE engine installer install-cluster-manager.sh
    iso_extract:
      image: "{{isoRepo}}{{engineIso}}"
      dest: "{{isoRepo}}"
      files:
      - utils/install-cluster-manager.sh

- name: Install versionlock plugin for yum
  yum: 
    name: yum-plugin-versionlock

- name: Install the MSE Automated Deployment engine
  shell: |
    cd {{isoRepo}} &&
    test -f install-cluster-manager.sh && _theInstaller=cluster_manager || _theInstaller=tas &&
    ./install-${_theInstaller}.sh --yes --install hpe-install-${_theInstaller} --disableplugin=yum-plugin-versionlock --iso {{engineIso}} && 
    ./install-${_theInstaller}.sh --yes --install --with-hpoc-tls-certificates --with-hpe-mse-nfv --with-hpoc-uspm-nfv --enablerepo='{{yumRepo}}' --iso {{engineIso}}

- stat: path=/etc/opt/OC/hpe-install-tas/versionlock.d
- name: Create a labdrops yum repository for rpm packages in {{isoRepo}} 
  shell: |
    find {{isoRepo}}*.rpm -exec rpm -qp {} --qf '%{epoch}:%{name}-%{version}-%{release}.*\n' \; > /etc/yum/pluginconf.d/versionlock.list ; /bin/cp -f /etc/yum/pluginconf.d/versionlock.list /etc/opt/OC/hpe-install-tas/versionlock.d/hpe-mse-nfv-999-versionlock.list 
    > /etc/yum/pluginconf.d/versionlock.list
    createrepo --database {{isoRepo}} ; 
    cd /etc/yum.repos.d/
    echo "[labdrops]"  > labdrop.repo ; echo "name=lab repository for development packages" >> labdrop.repo ; echo "baseurl=file://{{isoRepo}}" >> labdrop.repo ; echo "enabled=1"  >> labdrop.repo ; echo "gpgcheck=0" >> labdrop.repo ;

- name: Update with lab drops from {{isoRepo}}
  shell: |
    cd {{isoRepo}} &&
    test -f install-cluster-manager.sh && _theInstaller=cluster_manager || _theInstaller=tas &&
    ./install-${_theInstaller}.sh --yes --upgrade --enablerepo='{{yumRepo}}' --iso {{engineIso}}

- name: Make sure the host is in /etc/hosts 
  shell: grep {{theNodeHostname}} /etc/hosts || echo {{theNodeIpAddress}} {{theNodeHostname}} >> /etc/hosts

- name: Enable sudo without tty since no password is required
  lineinfile: 
    path: /etc/sudoers
    regexp: "^Defaults    requiretty"
    line: "#Defaults    requiretty"

- name: Enable ssh for root and ocadmin with fixed keys
  shell: |
    sed -i "/^PasswordAuthentication.*no/d" /etc/ssh/sshd_config &&
    sed -i "s/#PasswordAuthentication.*/PasswordAuthentication yes/" /etc/ssh/sshd_config &&
    sed -i "/^PermitRootLogin.*no/d" /etc/ssh/sshd_config &&
    sed -i "s/#PermitRootLogin.*/PermitRootLogin yes/" /etc/ssh/sshd_config
- name: ocadmin ssh directory
  file: 
    path: '/home/ocadmin/.ssh'
    state: directory
    recurse: yes
    owner: 'ocadmin'
- name: root id_rsa.pub
  get_url:
    url: "{{sshKeysUrl}}id_rsa.pub"
    dest: "/root/.ssh/"
    mode: 0600
- name: root id_rsa
  get_url:
    url: "{{sshKeysUrl}}id_rsa"
    dest: "/root/.ssh/"
    mode: 0600
- name: root authorized_keys
  copy:
    remote_src: yes
    src: "/root/.ssh/id_rsa.pub"
    dest: "/root/.ssh/authorized_keys"
    mode: 0600
- name: ocadmin id_rsa.pub
  get_url:
    url: "{{sshKeysUrl}}id_rsa.pub"
    dest: "/home/ocadmin/.ssh/"
    owner: 'ocadmin'
    mode: 0600
- name: ocadmin id_rsa
  get_url:
    url: "{{sshKeysUrl}}id_rsa"
    dest: "/home/ocadmin/.ssh/"
    owner: 'ocadmin'
    mode: 0600
- name: ocadmin authorized_keys
  copy:
    remote_src: yes
    src: "/home/ocadmin/.ssh/id_rsa.pub"
    dest: "/home/ocadmin/.ssh/authorized_keys"
    owner: 'ocadmin'
    mode: 0600
- name: ssh_host private keys ecdsa ed25519
  with_items: ['ecdsa','ed25519']
  loop_control:
    loop_var:
      _aKeyType
  get_url:
    url: "{{sshKeysUrl}}ssh_host_{{_aKeyType}}_key"
    dest: "/etc/ssh/"
    mode: 0640
- name: ssh_host private keys rsa
  with_items: ['rsa']
  loop_control:
    loop_var:
      _aKeyType
  get_url:
    url: "{{sshKeysUrl}}ssh_host_{{_aKeyType}}_key"
    dest: "/etc/ssh/"
    mode: 0600
- name: ssh_host public keys ecdsa ed25519 rsa
  with_items: ['ecdsa','ed25519','rsa']
  loop_control:
    loop_var:
      _aKeyType
  get_url:
    url: "{{sshKeysUrl}}ssh_host_{{_aKeyType}}_key.pub"
    dest: "/etc/ssh/"
    mode: 0644
- name: Restart service sshd
  service:
    name: sshd
    state: restarted

# mse nfv services needs to be started only if not already successfully completed
# ignore start error, as this can mean that the service is already running
- name: Start all MSE engines services
  with_items: ['nivr','ocmp','ocsnf','uspm']
  loop_control:
    loop_var:
      vnfc
  shell: service {{vnfc}}-nfv status || service {{vnfc}}-nfv start || echo started

# (C) Copyright 2018 Hewlett Packard Enterprise Development LP.